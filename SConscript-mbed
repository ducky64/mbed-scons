import json

Import('env')

env.SetDefault(MBED_COMMON_CONFIG_SCONSCRIPT = [
  File('targets/SConscript-mbed-env-gcc'),
])

env.SetDefault(MBED_CORE_CONFIG_SCONSCRIPT = {
  'Cortex-M0+': File('targets/SConscript-mbed-env-cortexm0plus'),
  'Cortex-M3': File('targets/SConscript-mbed-env-cortexm3'),
  'Cortex-M4F': File('targets/SConscript-mbed-env-cortexm4'),
})

"""Helper function to do the dict inheritance, basically like dict update but
list values are appended instead of clobbered.
""" 
def target_dict_update(base, add):
  for key, val in add.items():
    if key in base:
      if isinstance(val, list):
        if base[key] is None:
          base[key] = []
        assert isinstance(base[key], list), "%s=%s <= %s, type error" % (key, base[key], val)
        base[key].extend(val)
      else:
        assert not isinstance(base[key], list)
        base[key] = val
    else:
      base[key] = val
  return base

"""Configures the environment for a mbed target (defined in hal/targets.json)
by parsing the targets.json file. Only valid with newer versions of the mbed
library that define this.
targets_file is the targets.json file
"""
def ConfigureMbedTarget(env, target_name, targets_file):
  with open(File(targets_file).abspath) as f:
    target_json = json.load(f)
    assert target_name in target_json, "No target '%s' in targets.json" % target_name
    inherit_chain = [target_name]
    current_dict = target_json[target_name]
    while 'inherits' in current_dict:
      assert len(current_dict['inherits']) == 1, "Multiple inherits not supported yet" 
      inherit_name = current_dict['inherits'][0]
      inherit_chain.append(inherit_name)
      assert inherit_name in target_json, "No inherit target '%s' in targets.json" % target_name
      current_dict = target_json[inherit_name]
    
    target_dict = {}
    for inherit_name in reversed(inherit_chain):
      target_dict = target_dict_update(target_dict, target_json[inherit_name])

    for script in env['MBED_COMMON_CONFIG_SCONSCRIPT']:
      SConscript(script, exports='env')
    
    assert target_dict['core'] in env['MBED_CORE_CONFIG_SCONSCRIPT'], "Unknown core '%s'" % target_dict['core']
    SConscript(env['MBED_CORE_CONFIG_SCONSCRIPT'][target_dict['core']], exports='env')

    env.Append(MBED_TARGET='TARGET_' + str(target_name))
    env.Append(CPPDEFINES='TARGET_' + str(target_name))
    for label in target_dict['extra_labels']:
      env.Append(MBED_TARGET='TARGET_' + label)
      env.Append(CPPDEFINES='TARGET_' + label)
    
    for ff in target_dict['supported_form_factors']:
      env.Append(CPPDEFINES='TARGET_FF_' + ff)
      
    for feature in target_dict['device_has']:
      env.Append(CPPDEFINES='DEVICE_' + feature + '=1')
env.AddMethod(ConfigureMbedTarget)

"""Returns a list of directories containing sources for the current target.
Assumes env['MBED_TARGET'] is set to all the target paths.
Takes in the root directory to start searching from.
"""
env.SetDefault(MBED_DIR_PATHS = ['api', 'common', 'hal', 'targets/cmsis', 'targets/hal'])
def GetMbedSourceDirectories(env, root_dir):
  mbed_target = env['MBED_TARGET']
  device_paths = env['MBED_DIR_PATHS']
  root_dir = Dir(root_dir)
    
  # Prefix mbed dir to paths
  device_paths = [root_dir.Dir(device_path) for device_path in device_paths]
  
  def get_device_subpaths(curr_dir_node):
    # Get all subdirs that are directories, including the argument directory
    subdirs = [node for node in curr_dir_node.glob("*") if
               node.name in mbed_target]
    alldirs = [curr_dir_node]
    for subdir in subdirs:
      alldirs.extend(get_device_subpaths(subdir))
    return alldirs
  
  scanned_device_paths = []
  for device_path in device_paths:
    scanned_device_paths.extend(get_device_subpaths(device_path))
    
  return scanned_device_paths
env.AddMethod(GetMbedSourceDirectories)

def GetMbedSources(env, source_directories):
  all_sources = []
  for device_path in source_directories:
    all_sources.extend(device_path.glob('*.c'))
    all_sources.extend(device_path.glob('*.cpp'))
    all_sources.extend(device_path.glob('*.S'))
  return all_sources
env.AddMethod(GetMbedSources)
    
def GetMbedLinkscript(env, source_directories):
  all_sources = []
  for device_path in source_directories:
    all_sources.extend(device_path.glob('*.ld'))
  assert all_sources, "No linkerscripts found"  
  assert len(all_sources) == 1, "Multiple linkerscripts found: %s" % all_sources
  return all_sources[0]
env.AddMethod(GetMbedLinkscript)
    
env.SetDefault(BINCOM = '$OBJCOPY -O binary $SOURCE $TARGET')
env.SetDefault(BINCOMSTR = '$BINCOMSTR')
env.Append(BUILDERS = {
  'Binary': Builder(
    action=Action('$BINCOM', '$BINCOMSTR'),
    suffix='.bin',
    src_suffix='.elf'
  )
})

env.SetDefault(OBJDUMPCOM = '$OBJDUMP -Sdhl $SOURCE > $TARGET')
env.SetDefault(OBJDUMPCOMSTR = '$OBJDUMPCOM')
env.Append(BUILDERS = {
  'Objdump': Builder(
    action=Action('$OBJDUMPCOM', '$OBJDUMPCOMSTR'),
    suffix='.dump.txt',
    src_suffix='.elf'
  )
})

env.SetDefault(SYMBOLSCOM = '$OBJSYMBOLS --line-numbers --print-size --numeric-sort $SOURCE > $TARGET')
env.SetDefault(SYMBOLSCOMSTR = '$SYMBOLSCOM')
env.Append(BUILDERS = {
  'Symbols': Builder(
    action=Action('$SYMBOLSCOM', '$SYMBOLSCOMSTR'),
    suffix='.nm.txt',
    src_suffix='.elf'
  )
})

env.SetDefault(SYMBOLSIZESCOM= '$OBJSYMBOLS --line-numbers --print-size --size-sort --reverse-sort $SOURCE > $TARGET')
env.SetDefault(SYMBOLSIZESCOMSTR = '$SYMBOLSIZESCOM')
env.Append(BUILDERS = {
  'SymbolsSize': Builder(
    action=Action('$SYMBOLSIZESCOM', '$SYMBOLSIZESCOMSTR'),
    suffix='.nm_size.txt',
    src_suffix='.elf'
  )
})
