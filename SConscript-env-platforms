Import('env')

# Workaround for command line length limitations on Windows
if env['PLATFORM'] == 'win32':
  spawn_orig = env['SPAWN']
  try:
    import win32api
    import win32file
    import win32event
    import win32process
    import win32security
  
    def my_spawn(sh, escape, cmd, args, spawnenv):
      newargs = ' '.join(map(escape, args[1:]))
      cmdline = cmd + " " + newargs
      
      # Don't use this where we don't need it, this causes issues 
      if len(cmdline) < 8000:
        return spawn_orig(sh, escape, cmd, args, spawnenv)
   
      assert '>' not in cmdline, "Redirection not supported in Windows long command workaround"
  
      newspawnenv = {}
      for var in spawnenv:
        newspawnenv[var] = spawnenv[var].encode('ascii', 'replace')
  
      sAttrs = win32security.SECURITY_ATTRIBUTES()
      StartupInfo = win32process.STARTUPINFO()
  
      hProcess, hThread, dwPid, dwTid = win32process.CreateProcess(None, cmdline, None, None, 1, 0, newspawnenv, None, StartupInfo)
      win32event.WaitForSingleObject(hProcess, win32event.INFINITE)
      exit_code = win32process.GetExitCodeProcess(hProcess)
      win32file.CloseHandle(hProcess);
      win32file.CloseHandle(hThread);
      return exit_code
  
    env['SPAWN'] = my_spawn
  
  except ImportError:
    Warnings.warn("Unable to import Python for Windows extensions (pywin32), a necessary workaround for long (>8192 char) command line commands")